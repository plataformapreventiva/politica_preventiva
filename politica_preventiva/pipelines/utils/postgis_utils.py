#!/usr/bin/env python
# -*- coding: utf-8 -*-
""" PostGis Utils 

This module contains utilities for Postgis module of Postgres

TODO(Cambiar el configdic a el dotenv para homologar)

"""
import os
import sys
import tempfile
#import rarfile
import requests
from requests.auth import HTTPDigestAuth
import numpy as np
import pandas as pd


def geo_to_sql(shp_dir, schema_name, table_name, output_path, encoding="utf-8"):
    """Convert a directory containing shapefiles to a SQL database

    This function uses the shp2pgsql command in Postgis to convert a
    directory containing shapefiles into a single SQL database, which
    can be uploaded to Postgres using, for example,

    psql -h cluster -U username -W -f manzanas.sql

    :param shp_dir [string] path to directory with  all the shapefiles
    :param schema name [string] String specifying the schema to which
     the new table belongs.
    :param table_name [string] The name the table to create using the
      shape files in shp_dir.
    :param output_path [string] The path and name of sql file to which to
     output results.
    :param encoding [string] The character encoding of the underlying
     dbfs.
    :return None
    :side-effects The merged SQL database is create in the path
     specified by output_name. The intermediate SQL files are located
     in the original shapefile directory.
    """
    all_files = os.listdir(shp_dir)
    all_files = set([shp_dir + "/" + f.split(".")[0] for f in all_files])
    all_files = list(all_files)
    all_files.sort()

    # loop over shapefiles, using -a to describe files that will be appended
    for (cur_ix, cur_file) in enumerate(all_files):
        append_str = ""
        if cur_ix != 0:
            append_str = "-a"
        shp2pgsql_cmd = "shp2pgsql -W '%s' %s %s %s.%s > %s" % \
                        (encoding, append_str, cur_file, schema_name,
                         table_name, cur_file + ".sql")
        logger.info(shp2pgsql_cmd)
        os.system(shp2pgsql_cmd)

    # combine the intermediate SQL databases
    os.system("cat %s/*.sql > %s" % (shp_dir, output_path))


def load_geo(shp_dir, conf, schema_name, table_name, encoding="utf-8"):
    """Load spatial data to a postgres database

    This is a wrapper of geo_to_sql() that also uploads the final sql file
    into a postgres database. The actual sql file generated by geo_to_sql()
    is only temporary.

    :param shp_dir [string] path to directory with  all the shapefiles
    :param schema name [string] String specifying the schema to which
     the new table belongs.
    :param conf [dict] A dict specifying information needed to connect to
     and load to the database. Expects the fields "USER", "PASSWORD",
     "DATA_PASSWORD", and "HOST".
    :param table_name [string] The name the table to create using the
      shape files in shp_dir.
    :param output_path [string] The path and name of sql file to which to
     output results.
    :param encoding [string] The character encoding of the underlying
     dbfs.
    :return None
    :side-effects The merged SQL database is uploaded to the database.
    """
    _, temp_output = tempfile.mkstemp()
    geo_to_sql(shp_dir, schema_name, table_name, temp_output, encoding)

    # drop any existing tables
    psql_drop = r"PGPASSWORD=%s psql -h %s -U %s -c 'drop table if exists %s.%s'" % (
        conf["PASSWORD"],
        conf["HOST"],
        conf["USER"],
        schema_name,
        table_name
    )

    # create the table in postgres
    psql_create = r"PGPASSWORD=%s psql -h %s -U %s -f %s" % (
        conf["PASSWORD"],
        conf["HOST"],
        conf["USER"],
        temp_output
    )

    for cmd in [psql_drop, psql_create]:
        logger.info(cmd)
        os.system(cmd)
    os.remove(temp_output)


def load_spatial_from_archive(archive_dir, conf, schema_name, table_name, encoding="utf-8", archive_type="rar"):
    """ Given a directory of compressed files containing spatial data,
    upload the unarchived data to a database

    This is a wrapper for load_geo that first unarchives the required
    data, moves the shapefiles to a subdirectory, and loads the
    resulting sql to a database.

    :param archive_dir [string] An absolute path to the
    :param conf [dict] A dict specifying information needed to connect to
     and load to the database. Expects the fields "USER", "PASSWORD",
    "DATA_PASSWORD", and "HOST". See load_geo() describing how the
     connection is established.
    :param schema_name [string] The name to the (assumed existing) schema to
     add the table to. Defaults to the schema name.
    :param table_name [string] The name the table to create using the
      shape files in shp_dir.
    :param [string] archive_file The actual file to unarchive
    :param encoding [string] The character encoding of the underlying
     dbfs.
    :return None
    :rtype None
    :side-effects: Unarchives the archive_dir and uploads data to the postgres database.
    """
    unpack_all_in_dir(archive_dir, archive_type)

    # move shapefiles to their own directories
    shp_ext = ["dbf", "prj", "dbn", "sbx", "shp", "shx", "sbn", "csv"]
    unpacked_shps = [x for x in os.listdir(archive_dir)
                     if x.endswith(tuple(shp_ext))]
    move_to_subdir(unpacked_shps, archive_dir, "unpacked_shps")

    # load to a database
    load_geo(os.path.join(archive_dir, "unpacked_shps"), conf, schema_name,
             table_name, encoding)
